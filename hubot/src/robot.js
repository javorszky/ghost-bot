// Generated by CoffeeScript 1.4.0
(function() {
  var Brain, CatchAllMessage, EnterMessage, EventEmitter, Fs, HUBOT_DEFAULT_ADAPTERS, HUBOT_DOCUMENTATION_SECTIONS, HttpClient, LeaveMessage, Listener, Log, Path, Response, Robot, TextListener, TextMessage, User, _ref, _ref1,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __slice = [].slice;

  Fs = require('fs');

  Log = require('log');

  Path = require('path');

  HttpClient = require('scoped-http-client');

  EventEmitter = require('events').EventEmitter;

  User = require('./user');

  Brain = require('./brain');

  Response = require('./response');

  _ref = require('./listener'), Listener = _ref.Listener, TextListener = _ref.TextListener;

  _ref1 = require('./message'), TextMessage = _ref1.TextMessage, EnterMessage = _ref1.EnterMessage, LeaveMessage = _ref1.LeaveMessage, CatchAllMessage = _ref1.CatchAllMessage;

  HUBOT_DEFAULT_ADAPTERS = ['irc', 'campfire', 'shell'];

  HUBOT_DOCUMENTATION_SECTIONS = ['description', 'dependencies', 'configuration', 'commands', 'notes', 'author', 'examples', 'urls'];

  Robot = (function() {

    function Robot(adapterPath, adapter, httpd, name) {
      if (name == null) {
        name = 'Hubot';
      }
      this.name = name;
      this.brain = new Brain;
      this.events = new EventEmitter;
      this.alias = false;
      this.adapter = null;
      this.Response = Response;
      this.commands = [];
      this.listeners = [];
      this.logger = new Log(process.env.HUBOT_LOG_LEVEL || 'info');
      this.parseVersion();
      if (httpd) {
        this.setupConnect();
      }
      if (adapter != null) {
        this.loadAdapter(adapterPath, adapter);
      }
    }

    Robot.prototype.hear = function(regex, callback) {
      return this.listeners.push(new TextListener(this, regex, callback));
    };

    Robot.prototype.respond = function(regex, callback) {
      var alias, modifiers, newRegex, pattern, re;
      re = regex.toString().split('/');
      re.shift();
      modifiers = re.pop();
      if (re[0] && re[0][0] === '^') {
        this.logger.warning("Anchors don't work well with respond, perhaps you want to use 'hear'");
        this.logger.warning("The regex in question was " + (regex.toString()));
      }
      pattern = re.join('/');
      if (this.alias) {
        alias = this.alias.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&');
        newRegex = new RegExp("^[@]?(?:" + alias + "[:,]?|" + this.name + "[:,]?)\\s*(?:" + pattern + ")", modifiers);
      } else {
        newRegex = new RegExp("^[@]?" + this.name + "[:,]?\\s*(?:" + pattern + ")", modifiers);
      }
      return this.listeners.push(new TextListener(this, newRegex, callback));
    };

    Robot.prototype.enter = function(callback) {
      return this.listeners.push(new Listener(this, (function(msg) {
        return msg instanceof EnterMessage;
      }), callback));
    };

    Robot.prototype.leave = function(callback) {
      return this.listeners.push(new Listener(this, (function(msg) {
        return msg instanceof LeaveMessage;
      }), callback));
    };

    Robot.prototype.catchAll = function(callback) {
      return this.listeners.push(new Listener(this, (function(msg) {
        return msg instanceof CatchAllMessage;
      }), (function(msg) {
        msg.message = msg.message.message;
        return callback(msg);
      })));
    };

    Robot.prototype.receive = function(message) {
      var listener, results, _i, _len, _ref2;
      results = [];
      _ref2 = this.listeners;
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        listener = _ref2[_i];
        try {
          results.push(listener.call(message));
          if (message.done) {
            break;
          }
        } catch (error) {
          this.logger.error("Unable to call the listener: " + error + "\n" + error.stack);
          false;
        }
      }
      if (!(message instanceof CatchAllMessage) && results.indexOf(true) === -1) {
        return this.receive(new CatchAllMessage(message));
      }
    };

    Robot.prototype.loadFile = function(path, file) {
      var ext, full;
      ext = Path.extname(file);
      full = Path.join(path, Path.basename(file, ext));
      if (ext === '.coffee' || ext === '.js') {
        try {
          require(full)(this);
          return this.parseHelp("" + path + "/" + file);
        } catch (error) {
          return this.logger.error("Unable to load " + full + ": " + error + "\n" + error.stack);
        }
      }
    };

    Robot.prototype.load = function(path) {
      var _this = this;
      this.logger.debug("Loading scripts from " + path);
      return Fs.exists(path, function(exists) {
        var file, _i, _len, _ref2, _results;
        if (exists) {
          _ref2 = Fs.readdirSync(path);
          _results = [];
          for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
            file = _ref2[_i];
            _results.push(_this.loadFile(path, file));
          }
          return _results;
        }
      });
    };

    Robot.prototype.loadHubotScripts = function(path, scripts) {
      var script, _i, _len, _results;
      this.logger.debug("Loading hubot-scripts from " + path);
      _results = [];
      for (_i = 0, _len = scripts.length; _i < _len; _i++) {
        script = scripts[_i];
        _results.push(this.loadFile(path, script));
      }
      return _results;
    };

    Robot.prototype.loadExternalScripts = function(packages) {
      var pkg, _i, _len, _results;
      this.logger.debug("Loading external-scripts from npm packages");
      _results = [];
      for (_i = 0, _len = packages.length; _i < _len; _i++) {
        pkg = packages[_i];
        try {
          _results.push(require(pkg)(this));
        } catch (error) {
          _results.push(this.logger.error("Error loading scripts from npm package - " + error));
        }
      }
      return _results;
    };

    Robot.prototype.setupConnect = function() {
      var Connect, herokuUrl, pass, stat, user,
        _this = this;
      user = process.env.CONNECT_USER;
      pass = process.env.CONNECT_PASSWORD;
      stat = process.env.CONNECT_STATIC;
      Connect = require('connect');
      Connect.router = require('connect_router');
      this.connect = Connect();
      if (user && pass) {
        this.connect.use(Connect.basicAuth(user, pass));
      }
      this.connect.use(Connect.bodyParser());
      if (stat) {
        this.connect.use(Connect["static"](stat));
      }
      this.connect.use(Connect.router(function(app) {
        return _this.router = {
          get: function(route, callback) {
            _this.logger.debug("Registered route: GET " + route);
            return app.get(route, callback);
          },
          post: function(route, callback) {
            _this.logger.debug("Registered route: POST " + route);
            return app.post(route, callback);
          },
          put: function(route, callback) {
            _this.logger.debug("Registered route: PUT " + route);
            return app.put(route, callback);
          },
          "delete": function(route, callback) {
            _this.logger.debug("Registered route: DELETE " + route);
            return app["delete"](route, callback);
          }
        };
      }));
      this.server = this.connect.listen(process.env.VCAP_APP_PORT || 8080);
      herokuUrl = process.env.HEROKU_URL;
      if (herokuUrl) {
        if (!/\/$/.test(herokuUrl)) {
          herokuUrl += '/';
        }
        return setInterval(function() {
          return HttpClient.create("" + herokuUrl + "hubot/ping").post()(function(err, res, body) {
            return _this.logger.info('keep alive ping!');
          });
        }, 1200000);
      }
    };

    Robot.prototype.loadAdapter = function(path, adapter) {
      this.logger.debug("Loading adapter " + adapter);
      try {
        path = __indexOf.call(HUBOT_DEFAULT_ADAPTERS, adapter) >= 0 ? "" + path + "/" + adapter : "hubot-" + adapter;
        return this.adapter = require(path).use(this);
      } catch (err) {
        return this.logger.error("Cannot load adapter " + adapter + " - " + err);
      }
    };

    Robot.prototype.helpCommands = function() {
      return this.commands.sort();
    };

    Robot.prototype.parseHelp = function(path) {
      var scriptDocumentation, scriptName,
        _this = this;
      this.logger.debug("Parsing help for " + path);
      scriptName = Path.basename(path).replace(/\.(coffee|js)$/, '');
      scriptDocumentation = {};
      return Fs.readFile(path, 'utf-8', function(err, body) {
        var cleanedLine, currentSection, line, nextSection, _i, _j, _len, _len1, _ref2, _ref3, _results;
        if (err != null) {
          throw err;
        }
        currentSection = null;
        _ref2 = body.split("\n");
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          line = _ref2[_i];
          if (!(line[0] === '#' || line.substr(0, 2) === '//')) {
            break;
          }
          cleanedLine = line.replace(/^(#|\/\/)\s?/, "").trim();
          if (cleanedLine.length === 0) {
            continue;
          }
          if (cleanedLine.toLowerCase() === 'none') {
            continue;
          }
          nextSection = cleanedLine.toLowerCase().replace(':', '');
          if (__indexOf.call(HUBOT_DOCUMENTATION_SECTIONS, nextSection) >= 0) {
            currentSection = nextSection;
            scriptDocumentation[currentSection] = [];
          } else {
            if (currentSection) {
              scriptDocumentation[currentSection].push(cleanedLine.trim());
              if (currentSection === 'commands') {
                _this.commands.push(cleanedLine.trim());
              }
            }
          }
        }
        if (currentSection === null) {
          _this.logger.info("" + path + " is using deprecated documentation syntax");
          scriptDocumentation.commands = [];
          _ref3 = body.split("\n");
          _results = [];
          for (_j = 0, _len1 = _ref3.length; _j < _len1; _j++) {
            line = _ref3[_j];
            if (!(line[0] === '#' || line.substr(0, 2) === '//')) {
              break;
            }
            if (!line.match('-')) {
              continue;
            }
            cleanedLine = line.slice(2, +line.length + 1 || 9e9).replace(/^hubot/i, _this.name).trim();
            scriptDocumentation.commands.push(cleanedLine);
            _results.push(_this.commands.push(cleanedLine));
          }
          return _results;
        }
      });
    };

    Robot.prototype.send = function() {
      var strings, user, _ref2;
      user = arguments[0], strings = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return (_ref2 = this.adapter).send.apply(_ref2, [user].concat(__slice.call(strings)));
    };

    Robot.prototype.reply = function() {
      var strings, user, _ref2;
      user = arguments[0], strings = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return (_ref2 = this.adapter).reply.apply(_ref2, [user].concat(__slice.call(strings)));
    };

    Robot.prototype.messageRoom = function() {
      var room, strings, user, _ref2;
      room = arguments[0], strings = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      user = {
        room: room
      };
      return (_ref2 = this.adapter).send.apply(_ref2, [user].concat(__slice.call(strings)));
    };

    Robot.prototype.on = function() {
      var args, event, _ref2;
      event = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return (_ref2 = this.events).on.apply(_ref2, [event].concat(__slice.call(args)));
    };

    Robot.prototype.emit = function() {
      var args, event, _ref2;
      event = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return (_ref2 = this.events).emit.apply(_ref2, [event].concat(__slice.call(args)));
    };

    Robot.prototype.run = function() {
      return this.adapter.run();
    };

    Robot.prototype.shutdown = function() {
      this.adapter.close();
      return this.brain.close();
    };

    Robot.prototype.parseVersion = function() {
      return this.version = "2.5.0";
    };

    Robot.prototype.http = function(url) {
      return HttpClient.create(url);
    };

    return Robot;

  })();

  module.exports = Robot;

}).call(this);
