// Generated by CoffeeScript 1.4.0
(function() {
  var Brain, EventEmitter, User,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  EventEmitter = require('events').EventEmitter;

  User = require('./user');

  Brain = (function(_super) {

    __extends(Brain, _super);

    function Brain() {
      this.data = {
        users: {}
      };
      this.resetSaveInterval(5);
    }

    Brain.prototype.save = function() {
      return this.emit('save', this.data);
    };

    Brain.prototype.close = function() {
      clearInterval(this.saveInterval);
      this.save();
      return this.emit('close');
    };

    Brain.prototype.resetSaveInterval = function(seconds) {
      var _this = this;
      if (this.saveInterval) {
        clearInterval(this.saveInterval);
      }
      return this.saveInterval = setInterval(function() {
        return _this.save();
      }, seconds * 1000);
    };

    Brain.prototype.mergeData = function(data) {
      var k;
      for (k in data || {}) {
        this.data[k] = data[k];
      }
      return this.emit('loaded', this.data);
    };

    Brain.prototype.users = function() {
      return this.data.users;
    };

    Brain.prototype.userForId = function(id, options) {
      var user;
      user = this.data.users[id];
      if (!user) {
        user = new User(id, options);
        this.data.users[id] = user;
      }
      if (options && options.room && (!user.room || user.room !== options.room)) {
        user = new User(id, options);
        this.data.users[id] = user;
      }
      return user;
    };

    Brain.prototype.userForName = function(name) {
      var k, lowerName, result, userName;
      result = null;
      lowerName = name.toLowerCase();
      for (k in this.data.users || {}) {
        userName = this.data.users[k]['name'];
        if ((userName != null) && userName.toLowerCase() === lowerName) {
          result = this.data.users[k];
        }
      }
      return result;
    };

    Brain.prototype.usersForRawFuzzyName = function(fuzzyName) {
      var key, lowerFuzzyName, user, _ref, _results;
      lowerFuzzyName = fuzzyName.toLowerCase();
      _ref = this.data.users || {};
      _results = [];
      for (key in _ref) {
        user = _ref[key];
        if (user.name.toLowerCase().lastIndexOf(lowerFuzzyName, 0) === 0) {
          _results.push(user);
        }
      }
      return _results;
    };

    Brain.prototype.usersForFuzzyName = function(fuzzyName) {
      var lowerFuzzyName, matchedUsers, user, _i, _len;
      matchedUsers = this.usersForRawFuzzyName(fuzzyName);
      lowerFuzzyName = fuzzyName.toLowerCase();
      for (_i = 0, _len = matchedUsers.length; _i < _len; _i++) {
        user = matchedUsers[_i];
        if (user.name.toLowerCase() === lowerFuzzyName) {
          return [user];
        }
      }
      return matchedUsers;
    };

    return Brain;

  })(EventEmitter);

  module.exports = Brain;

}).call(this);
